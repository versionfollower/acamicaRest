buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

apply from: 'querydsl.gradle'
apply from: 'jpa-metamodel.gradle'

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'

    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-hateoas')

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.hibernate:hibernate-entitymanager'
    compile 'org.hibernate:hibernate-core'
    compile 'org.hibernate:hibernate-java8'
    compile 'com.h2database:h2'
    compile 'org.liquibase:liquibase-core'

    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')

    from       'frolvlad/alpine-oraclejdk8:slim'
    entryPoint 'java', '-jar', 'social.jar'
    exposePort 8080
    addFile    'social.jar', 'social.jar'
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile, build
    inputDir = createDockerfile.destFile.parentFile
    tag = "acamica/${jar.baseName}"

    doFirst {
      copy { from jar into 'build/docker' }
    }
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    containerName = jar.baseName
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8080:8080']
}

task startDockerContainer(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
}

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.getContainerId() }
}
